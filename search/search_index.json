{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hello.NPlant An example on Continuous Documentation - introducing a feedback loop for documentation as part of your build. This example shows how you can generate full blown documentation using mkdocs architectural documentation that lives with your code using NPlant & plantuml UI sketches & prototypes for use cases with Salt Install You will need plantuml , install by choco install plantuml mkdocs , install by choco install python -y pip install --user -r requirements.txt Build documentation Build the documentation using dotnet run --project hello.nplant/hello.nplant.csproj The documentation is built into the \\site subdirectory. Best way to view is python -m mkdocs serve and browse to http://localhost:8000 . Note that changes in the markdown documentation files within \\docs are automatically tracked by mkdocs rebuilding & refreshing the served documentation.","title":"Hello.NPlant"},{"location":"#hellonplant","text":"An example on Continuous Documentation - introducing a feedback loop for documentation as part of your build. This example shows how you can generate full blown documentation using mkdocs architectural documentation that lives with your code using NPlant & plantuml UI sketches & prototypes for use cases with Salt","title":"Hello.NPlant"},{"location":"#install","text":"You will need plantuml , install by choco install plantuml mkdocs , install by choco install python -y pip install --user -r requirements.txt","title":"Install"},{"location":"#build-documentation","text":"Build the documentation using dotnet run --project hello.nplant/hello.nplant.csproj The documentation is built into the \\site subdirectory. Best way to view is python -m mkdocs serve and browse to http://localhost:8000 . Note that changes in the markdown documentation files within \\docs are automatically tracked by mkdocs rebuilding & refreshing the served documentation.","title":"Build documentation"},{"location":"1-nplant/","text":"Architectural Diagrams with NPlant Code Examples adapted nplant/Samples , e.g. public record Foo ( string SomeString , Bar TheBar , Baz TheBaz ); public record Bar ( DateTime ? SomeDate , BarTypes Type ); public record Baz ( Foo TheFoo ); public enum RandomEnum { Member1 = 0 , Member2 = 1 , Member3 = 2 } public enum BarTypes { HighBar = 0 , LowBar = 1 } Enums Inheritance CircularReferences Legends Notes Packages Relationships ScanMode FullMonty Titles","title":"Architectural Diagrams with NPlant"},{"location":"1-nplant/#architectural-diagrams-with-nplant","text":"Code Examples adapted nplant/Samples , e.g. public record Foo ( string SomeString , Bar TheBar , Baz TheBaz ); public record Bar ( DateTime ? SomeDate , BarTypes Type ); public record Baz ( Foo TheFoo ); public enum RandomEnum { Member1 = 0 , Member2 = 1 , Member3 = 2 } public enum BarTypes { HighBar = 0 , LowBar = 1 }","title":"Architectural Diagrams with NPlant"},{"location":"1-nplant/#enums","text":"","title":"Enums"},{"location":"1-nplant/#inheritance","text":"","title":"Inheritance"},{"location":"1-nplant/#circularreferences","text":"","title":"CircularReferences"},{"location":"1-nplant/#legends","text":"","title":"Legends"},{"location":"1-nplant/#notes","text":"","title":"Notes"},{"location":"1-nplant/#packages","text":"","title":"Packages"},{"location":"1-nplant/#relationships","text":"","title":"Relationships"},{"location":"1-nplant/#scanmode","text":"","title":"ScanMode"},{"location":"1-nplant/#fullmonty","text":"","title":"FullMonty"},{"location":"1-nplant/#titles","text":"","title":"Titles"},{"location":"2-salt-ui/","text":"UI Sketches with Salt Salt is a sub-project included in PlantUML that may help you to design graphical interface. You can use either @startsalt keyword, or @startuml followed by a line with salt keyword. Basic widgets A window must start and end with brackets. You can then define: Button using [ and ] . Radio button using ( and ) . Checkbox using [ and ] . User text area using \" @startuml salt { Just plain text [This is my button] () Unchecked radio (X) Checked radio [] Unchecked box [X] Checked box \"Enter text here \" ^This is a droplist^ } @enduml The goal of this tool is to discuss about simple and sample windows. Using grid A table is automatically created when you use an opening bracket { . And you have to use | to separate columns. For example: @startsalt { Login | \"MyName \" Password | \"**** \" [Cancel] | [ OK ] } @endsalt Just after the opening bracket, you can use a character to define if you want to draw lines or columns of the grid : # To display all vertical and horizontal lines ! To display all vertical lines - To display all horizontal lines + To display external lines @startsalt {+ Login | \"MyName \" Password | \"\\*\\*\\*\\* \" [Cancel] | [ OK ] } @endsalt Using separator You can use several horizontal lines as separator. @startsalt { Text1 .. \"Some field\" == Note on usage ~~ Another text -- [Ok] } @endsalt Tree widget To have a Tree, you have to start with {T and to use + to denote hierarchy. @startsalt { {T + World ++ America +++ Canada +++ USA ++++ New York ++++ Boston +++ Mexico ++ Europe +++ Italy +++ Germany ++++ Berlin ++ Africa } } @endsalt Enclosing brackets You can define sub-elements by opening a new opening bracket. @startsalt { Name | \" \" Modifiers: | { (X) public | () default | () private | () protected [] abstract | [] final | [] static } Superclass: | { \"java.lang.Object \" | [Browse...] } } @endsalt Adding tabs You can add tabs using {/ notation. Note that you can use HTML code to have bold text. @startsalt {+ {/ <b>General | Fullscreen | Behavior | Saving } { { Open image in: | ^Smart Mode^ } [X] Smooth images when zoomed [X] Confirm image deletion [ ] Show hidden images } [Close] } @endsalt Tab could also be vertically oriented: @startsalt {+ {/ <b>General Fullscreen Behavior Saving } | { { Open image in: | ^Smart Mode^ } [X] Smooth images when zoomed [X] Confirm image deletion [ ] Show hidden images [Close] } } @endsalt Using menu You can add a menu by using {* notation. @startsalt {+ {* File | Edit | Source | Refactor } {/ General | Fullscreen | Behavior | Saving } { { Open image in: | ^Smart Mode^ } [X] Smooth images when zoomed [X] Confirm image deletion [ ] Show hidden images } [Close] } @endsalt It is also possible to open a menu: @startsalt {+ {* File | Edit | Source | Refactor Refactor | New | Open File | - | Close | Close All } {/ General | Fullscreen | Behavior | Saving } { { Open image in: | ^Smart Mode^ } [X] Smooth images when zoomed [X] Confirm image deletion [ ] Show hidden images } [Close] } @endsalt Advanced table You can use two special notations for tables: * for a cell with span with left . for an empty cell @startsalt {# . | Column 2 | Column 3 Row header 1 | value 1 | value 2 Row header 2 | A long cell | \\* } @endsalt OpenIconic [OpenIconic]((https://useiconic.com/open/) is an very nice open source icon set. Those icons have been integrated into the creole parser, so you can use them out-of-the-box. You can use the following syntax: <&ICON_NAME> . @startsalt { Login<&person> | \"MyName \" Password<&key> | \"**** \" [Cancel <&circle-x>] | [OK <&account-login>] } @endsalt The complete list is available on OpenIconic Website , or you can use the following special diagram: @startuml listopeniconic @enduml","title":"UI Sketches with Salt"},{"location":"2-salt-ui/#ui-sketches-with-salt","text":"Salt is a sub-project included in PlantUML that may help you to design graphical interface. You can use either @startsalt keyword, or @startuml followed by a line with salt keyword.","title":"UI Sketches with Salt"},{"location":"2-salt-ui/#basic-widgets","text":"A window must start and end with brackets. You can then define: Button using [ and ] . Radio button using ( and ) . Checkbox using [ and ] . User text area using \" @startuml salt { Just plain text [This is my button] () Unchecked radio (X) Checked radio [] Unchecked box [X] Checked box \"Enter text here \" ^This is a droplist^ } @enduml The goal of this tool is to discuss about simple and sample windows.","title":"Basic widgets"},{"location":"2-salt-ui/#using-grid","text":"A table is automatically created when you use an opening bracket { . And you have to use | to separate columns. For example: @startsalt { Login | \"MyName \" Password | \"**** \" [Cancel] | [ OK ] } @endsalt Just after the opening bracket, you can use a character to define if you want to draw lines or columns of the grid : # To display all vertical and horizontal lines ! To display all vertical lines - To display all horizontal lines + To display external lines @startsalt {+ Login | \"MyName \" Password | \"\\*\\*\\*\\* \" [Cancel] | [ OK ] } @endsalt","title":"Using grid"},{"location":"2-salt-ui/#using-separator","text":"You can use several horizontal lines as separator. @startsalt { Text1 .. \"Some field\" == Note on usage ~~ Another text -- [Ok] } @endsalt","title":"Using separator"},{"location":"2-salt-ui/#tree-widget","text":"To have a Tree, you have to start with {T and to use + to denote hierarchy. @startsalt { {T + World ++ America +++ Canada +++ USA ++++ New York ++++ Boston +++ Mexico ++ Europe +++ Italy +++ Germany ++++ Berlin ++ Africa } } @endsalt","title":"Tree widget"},{"location":"2-salt-ui/#enclosing-brackets","text":"You can define sub-elements by opening a new opening bracket. @startsalt { Name | \" \" Modifiers: | { (X) public | () default | () private | () protected [] abstract | [] final | [] static } Superclass: | { \"java.lang.Object \" | [Browse...] } } @endsalt","title":"Enclosing brackets"},{"location":"2-salt-ui/#adding-tabs","text":"You can add tabs using {/ notation. Note that you can use HTML code to have bold text. @startsalt {+ {/ <b>General | Fullscreen | Behavior | Saving } { { Open image in: | ^Smart Mode^ } [X] Smooth images when zoomed [X] Confirm image deletion [ ] Show hidden images } [Close] } @endsalt Tab could also be vertically oriented: @startsalt {+ {/ <b>General Fullscreen Behavior Saving } | { { Open image in: | ^Smart Mode^ } [X] Smooth images when zoomed [X] Confirm image deletion [ ] Show hidden images [Close] } } @endsalt","title":"Adding tabs"},{"location":"2-salt-ui/#using-menu","text":"You can add a menu by using {* notation. @startsalt {+ {* File | Edit | Source | Refactor } {/ General | Fullscreen | Behavior | Saving } { { Open image in: | ^Smart Mode^ } [X] Smooth images when zoomed [X] Confirm image deletion [ ] Show hidden images } [Close] } @endsalt It is also possible to open a menu: @startsalt {+ {* File | Edit | Source | Refactor Refactor | New | Open File | - | Close | Close All } {/ General | Fullscreen | Behavior | Saving } { { Open image in: | ^Smart Mode^ } [X] Smooth images when zoomed [X] Confirm image deletion [ ] Show hidden images } [Close] } @endsalt","title":"Using menu"},{"location":"2-salt-ui/#advanced-table","text":"You can use two special notations for tables: * for a cell with span with left . for an empty cell @startsalt {# . | Column 2 | Column 3 Row header 1 | value 1 | value 2 Row header 2 | A long cell | \\* } @endsalt","title":"Advanced table"},{"location":"2-salt-ui/#openiconic","text":"[OpenIconic]((https://useiconic.com/open/) is an very nice open source icon set. Those icons have been integrated into the creole parser, so you can use them out-of-the-box. You can use the following syntax: <&ICON_NAME> . @startsalt { Login<&person> | \"MyName \" Password<&key> | \"**** \" [Cancel <&circle-x>] | [OK <&account-login>] } @endsalt The complete list is available on OpenIconic Website , or you can use the following special diagram: @startuml listopeniconic @enduml","title":"OpenIconic"},{"location":"3-plantuml/","text":"ActorSystems with PlantUml.Net KevReed/PlantUml.Net is a .Net wrapper for PlantUml About Actor Models The Actor Model is one design pattern to meet meet the unique challenges of highly distributed systems . Not as popular as Stream Processing Platforms like e.g. Apache Kafka , the Actor Model might still be a good fit for a similar range of problems, cf. What Problems Does the Actor Model Solve? A common challenge is to visualize Actor Systems to better understand their inner workings, especially when the system is distributed across multiple machines or spans large hierarchies of actors. Here is a simple example of an Actor System with 3 actors, 2 of which are children of the root actor. @startuml simple-actor-system left to right direction package \"ActorSystem\" { actor \"Guardian\" as root actor \"LogActor\" as child1 actor \"PlaySongActor\" as child2 } root --> child1 :tells root --> child2 :tells @enduml Example Project The example project some.actors.sln uses Akka.Net to create a simple Actor System. TL;DR: The final result looks like this: For starters we used the custom dotnet templates of PetaBridge to create a new project, cf. Petabridge.Templates Petabridge.App.Web Next, we added some example actors and some REST Api controllers to reflect on the inner workings of the Actor System. NOTE: Since PlantUml supports also JSON , it is pretty simple to get a visualization of your Actor System. You can run the project using $ dotnet run --project some.actors/src/some.actors/some.actors.csproj [ INFO ][ 19 .11.2022 20 :13:34 ][ Thread 0001 ][ remoting ( akka://ClusterSys )] Starting remoting [ INFO ][ 19 .11.2022 20 :13:34 ][ Thread 0001 ][ remoting ( akka://ClusterSys )] Remoting started ; listening on addresses : [ akka.tcp://ClusterSys@localhost:9221 ] [ INFO ][ 19 .11.2022 20 :13:34 ][ Thread 0001 ][ remoting ( akka://ClusterSys )] Remoting now listens on addresses: [ akka.tcp://ClusterSys@localhost:9221 ] [ INFO ][ 19 .11.2022 20 :13:34 ][ Thread 0001 ][ Cluster ( akka://ClusterSys )] Cluster Node [ akka.tcp://ClusterSys@localhost:9221 ] - Starting up... [ INFO ][ 19 .11.2022 20 :13:34 ][ Thread 0001 ][ Cluster ( akka://ClusterSys )] Cluster Node [ akka.tcp://ClusterSys@localhost:9221 ] - Started up successfully [ INFO ][ 19 .11.2022 20 :13:34 ][ Thread 0049 ][ Cluster ( akka://ClusterSys )] Cluster Node [ 0 .3.0 ] - Node [ akka.tcp://ClusterSys@localhost:9221 ] is JOINING itself ( with roles [] , version [ 0 .3.0 ]) and forming a new cluster [ INFO ][ 19 .11.2022 20 :13:34 ][ Thread 0049 ][ Cluster ( akka://ClusterSys )] Cluster Node [ akka.tcp://ClusterSys@localhost:9221 ] - is the new leader among reachable nodes ( more leaders may exist ) [ INFO ][ 19 .11.2022 20 :13:34 ][ Thread 0055 ][ akka.tcp://ClusterSys@localhost:9221/user/petabridge.cmd ] petabridge.cmd host bound to [ 0 .0.0.0:9110 ] [ INFO ][ 19 .11.2022 20 :13:34 ][ Thread 0049 ][ Cluster ( akka://ClusterSys )] Cluster Node [ akka.tcp://ClusterSys@localhost:9221 ] - Leader is moving node [ akka.tcp://ClusterSys@localhost:9221 ] to [ Up ] info: Microsoft.Hosting.Lifetime [ 14 ] Now listening on: http://localhost:5000 info: Microsoft.Hosting.Lifetime [ 14 ] Now listening on: https://localhost:5001 info: Microsoft.Hosting.Lifetime [ 0 ] Application started. Press Ctrl+C to shut down. info: Microsoft.Hosting.Lifetime [ 0 ] Hosting environment: Development Finally, you can request the PlantUml-model of the Actor System using $ curl http://localhost:5000/api/_Systems/ClusterSys/_plantuml @startjson { \"name\" : \"ClusterSys\" , \"upTime\" : \"00:01:58.0700444\" , \"guardian\" : { \"name\" : \"user\" , \"path\" : \"akka://ClusterSys/user\" , \"children\" : [ ... { \"uid\" : 815858693 , \"name\" : \"songs\" , \"path\" : \"akka://ClusterSys/user/songs\" } , { \"uid\" : 1805846811 , \"name\" : \"console\" , \"path\" : \"akka://ClusterSys/user/console\" } , ... ] } } @endjson You might also the Swagger UI at http://localhost:5000/swagger","title":"ActorSystems with PlantUml.Net"},{"location":"3-plantuml/#actorsystems-with-plantumlnet","text":"KevReed/PlantUml.Net is a .Net wrapper for PlantUml","title":"ActorSystems with PlantUml.Net"},{"location":"3-plantuml/#about-actor-models","text":"The Actor Model is one design pattern to meet meet the unique challenges of highly distributed systems . Not as popular as Stream Processing Platforms like e.g. Apache Kafka , the Actor Model might still be a good fit for a similar range of problems, cf. What Problems Does the Actor Model Solve? A common challenge is to visualize Actor Systems to better understand their inner workings, especially when the system is distributed across multiple machines or spans large hierarchies of actors. Here is a simple example of an Actor System with 3 actors, 2 of which are children of the root actor. @startuml simple-actor-system left to right direction package \"ActorSystem\" { actor \"Guardian\" as root actor \"LogActor\" as child1 actor \"PlaySongActor\" as child2 } root --> child1 :tells root --> child2 :tells @enduml","title":"About Actor Models"},{"location":"3-plantuml/#example-project","text":"The example project some.actors.sln uses Akka.Net to create a simple Actor System. TL;DR: The final result looks like this: For starters we used the custom dotnet templates of PetaBridge to create a new project, cf. Petabridge.Templates Petabridge.App.Web Next, we added some example actors and some REST Api controllers to reflect on the inner workings of the Actor System. NOTE: Since PlantUml supports also JSON , it is pretty simple to get a visualization of your Actor System. You can run the project using $ dotnet run --project some.actors/src/some.actors/some.actors.csproj [ INFO ][ 19 .11.2022 20 :13:34 ][ Thread 0001 ][ remoting ( akka://ClusterSys )] Starting remoting [ INFO ][ 19 .11.2022 20 :13:34 ][ Thread 0001 ][ remoting ( akka://ClusterSys )] Remoting started ; listening on addresses : [ akka.tcp://ClusterSys@localhost:9221 ] [ INFO ][ 19 .11.2022 20 :13:34 ][ Thread 0001 ][ remoting ( akka://ClusterSys )] Remoting now listens on addresses: [ akka.tcp://ClusterSys@localhost:9221 ] [ INFO ][ 19 .11.2022 20 :13:34 ][ Thread 0001 ][ Cluster ( akka://ClusterSys )] Cluster Node [ akka.tcp://ClusterSys@localhost:9221 ] - Starting up... [ INFO ][ 19 .11.2022 20 :13:34 ][ Thread 0001 ][ Cluster ( akka://ClusterSys )] Cluster Node [ akka.tcp://ClusterSys@localhost:9221 ] - Started up successfully [ INFO ][ 19 .11.2022 20 :13:34 ][ Thread 0049 ][ Cluster ( akka://ClusterSys )] Cluster Node [ 0 .3.0 ] - Node [ akka.tcp://ClusterSys@localhost:9221 ] is JOINING itself ( with roles [] , version [ 0 .3.0 ]) and forming a new cluster [ INFO ][ 19 .11.2022 20 :13:34 ][ Thread 0049 ][ Cluster ( akka://ClusterSys )] Cluster Node [ akka.tcp://ClusterSys@localhost:9221 ] - is the new leader among reachable nodes ( more leaders may exist ) [ INFO ][ 19 .11.2022 20 :13:34 ][ Thread 0055 ][ akka.tcp://ClusterSys@localhost:9221/user/petabridge.cmd ] petabridge.cmd host bound to [ 0 .0.0.0:9110 ] [ INFO ][ 19 .11.2022 20 :13:34 ][ Thread 0049 ][ Cluster ( akka://ClusterSys )] Cluster Node [ akka.tcp://ClusterSys@localhost:9221 ] - Leader is moving node [ akka.tcp://ClusterSys@localhost:9221 ] to [ Up ] info: Microsoft.Hosting.Lifetime [ 14 ] Now listening on: http://localhost:5000 info: Microsoft.Hosting.Lifetime [ 14 ] Now listening on: https://localhost:5001 info: Microsoft.Hosting.Lifetime [ 0 ] Application started. Press Ctrl+C to shut down. info: Microsoft.Hosting.Lifetime [ 0 ] Hosting environment: Development Finally, you can request the PlantUml-model of the Actor System using $ curl http://localhost:5000/api/_Systems/ClusterSys/_plantuml @startjson { \"name\" : \"ClusterSys\" , \"upTime\" : \"00:01:58.0700444\" , \"guardian\" : { \"name\" : \"user\" , \"path\" : \"akka://ClusterSys/user\" , \"children\" : [ ... { \"uid\" : 815858693 , \"name\" : \"songs\" , \"path\" : \"akka://ClusterSys/user/songs\" } , { \"uid\" : 1805846811 , \"name\" : \"console\" , \"path\" : \"akka://ClusterSys/user/console\" } , ... ] } } @endjson You might also the Swagger UI at http://localhost:5000/swagger","title":"Example Project"}]}